const fs = require('fs');
const path = require('path');
const express = require('express');
const { renderToString } = require('vue/server-renderer');

const projectRoot = path.resolve(__dirname);
const buildDir = path.join(projectRoot, 'build');
const serverBuildPath = path.join(buildDir, 'server');
const webBuildPath = path.join(buildDir, 'web');

const indexHtmlTemplate = fs.readFileSync(path.join(webBuildPath, 'index.html'), 'utf-8');
const ssrManifest = require(path.join(webBuildPath, 'ssr-manifest.json'));

const server = express();

// Only needed in dev builds, in prod everything would be served from cdn.
server.use(
	express.static(webBuildPath, {
		maxAge: 0,
		fallthrough: true,
		index: false,
	})
);

server.get('*', async (req, res) => {
	try {
		const context = {
			// TODO: this used to use req.url. Newer examples uses originalUrl.
			// Look into what the difference between these is.
			url: req.originalUrl,
			ua: req.headers['user-agent'],
			accept: req.headers['accept'] || '',
		};

		const createApp = require(path.join(serverBuildPath, 'server.js')).default;
		const app = await createApp(context);

		// passing SSR context object which will be available via useSSRContext()
		// @vitejs/plugin-vue injects code into a component's setup() that registers
		// itself on renderCtx.modules. After the render, renderCtx.modules would contain all the
		// components that have been instantiated during this render call.
		const renderCtx = {};
		const appHtml = await renderToString(app, renderCtx);

		console.log(renderCtx.modules);

		// the SSR manifest generated by Vite contains module -> chunk/asset mapping
		// which we can then use to determine what files need to be preloaded for this
		// request.
		const preloadLinks = renderPreloadLinks(renderCtx.modules, ssrManifest);

		const html = indexHtmlTemplate
			.replace(`<!--ssr-preload-links-->`, preloadLinks)
			.replace(`<!--ssr-outlet-->`, appHtml);

		res.status(200).set({ 'Content-Type': 'text/html' }).end(html);
	} catch (e) {
		console.log(e.stack);
		res.status(500).end(e.stack);
	}
});

const port = 3501;
server.listen(port, () => {
	console.log(`server started at localhost:${port}`);
});
