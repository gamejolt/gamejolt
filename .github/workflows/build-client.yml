name: Build Desktop App

on:
  push:
    tags:
      - 'release/**'

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-node@v3
        with:
          node-version: '16.20.0'
          cache: yarn

      - run: yarn install
      - run: yarn run client:build
      - run: cd build/desktop && tar cvf desktop-build.tar .

      - uses: actions/upload-artifact@v3
        with:
          name: desktop-build
          path: build/desktop/desktop-build.tar

  build-win:
    needs: build-frontend
    runs-on: windows-2022

    env:
      GOPATH: 'C:\go'
      GJPUSH_TOKEN: ${{ secrets.GJ_PUSH_TOKEN }}
      GJ_CERT_PASS: ${{ secrets.GJ_CERT_PASS }}

    steps:
      - uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install code signing cert
        run: |
          Set-Content scripts\build\desktop-app\certs\cert.pfx.b64 @'
          ${{ secrets.GJ_CERT }}
          '@
          CertUtil -Decode scripts\build\desktop-app\certs\cert.pfx.b64 scripts\build\desktop-app\certs\cert.pfx

      - uses: actions/setup-node@v3
        with:
          node-version: '16.20.0'
          cache: yarn

      - uses: actions/setup-go@v2
        with:
          go-version: '1.10.8'

      - uses: actions/download-artifact@v2
        with:
          name: desktop-build

      # I guess windows doesn't need -p flag
      - run: mkdir build/desktop
      - run: tar -xvf desktop-build.tar -C build/desktop

      # Enable VS2015 toolset
      - run: 'call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64'
        shell: cmd

      # GCC provided by MinGW needs to be <12 to compile joltron.
      - name: Set up MinGW 11.2.0
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64
          version: 11.2.0

      - run: gcc -v

      - run: echo %PATH%
        shell: cmd

      - run: yarn install

      # Production release
      - run: yarn run client:package --push
        if: ${{ !endsWith(github.ref_name, '-stage') }}

      # Stage release
      - run: yarn run client:package --push --staging
        if: ${{ endsWith(github.ref_name, '-stage') }}

      - uses: actions/upload-artifact@v3
        with:
          name: win64-installer
          path: build\desktop-app\GameJoltClientSetup.exe

      - uses: actions/upload-artifact@v3
        with:
          name: win64-package
          path: build\desktop-app\win64-package.tar.gz

  build-linux:
    needs: build-frontend
    runs-on: ubuntu-latest

    env:
      GOPATH: /home/runner/go
      GJPUSH_TOKEN: ${{ secrets.GJ_PUSH_TOKEN }}
      GJ_CERT_PASS: ${{ secrets.GJ_CERT_PASS }}

    steps:
      - run: sudo apt-get update

      - uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      # OpenGL dev dependencies
      - run: sudo apt-get install -y libgl1-mesa-dev xorg-dev

      - uses: actions/setup-node@v3
        with:
          node-version: '16.20.0'
          cache: yarn

      - uses: actions/setup-go@v2
        with:
          go-version: '1.10.8'

      - uses: actions/download-artifact@v3
        with:
          name: desktop-build

      - run: mkdir -p build/desktop
      - run: tar -xvf desktop-build.tar -C build/desktop

      - run: yarn install

      # Production release
      - run: yarn run client:package --push
        if: ${{ !endsWith(github.ref_name, '-stage') }}

      # Stage release
      - run: yarn run client:package --push --staging
        if: ${{ endsWith(github.ref_name, '-stage') }}

      - uses: actions/upload-artifact@v3
        with:
          name: linux64-installer
          path: build/desktop-app/GameJoltClient.tar.gz

      - uses: actions/upload-artifact@v3
        with:
          name: linux64-package
          path: build/desktop-app/linux64-package.tar.gz

  # TODO
  # build-mac:
  #   needs: build-frontend
  #   runs-on: macos-latest

  #   env:
  #     GOPATH: /Users/runner/go
  #     GJPUSH_TOKEN: ${{ secrets.GJ_PUSH_TOKEN }}
  #     GJ_CERT_PASS: ${{ secrets.GJ_CERT_PASS }}

  #   steps:
  #     - uses: shimataro/ssh-key-action@v2
  #       with:
  #         key: ${{ secrets.SSH_KEY }}
  #         known_hosts: ${{ secrets.KNOWN_HOSTS }}

  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: '16.20.0'
  #         cache: yarn

  #     - uses: actions/setup-go@v2
  #       with:
  #         go-version: '1.10.8'

  #     - uses: 3
  #       with:
  #         name: client-build

  #     - run: mkdir -p build/prod-client
  #     - run: tar -xvf client-build.tar -C build/prod-client

  #     - run: yarn install

  #     # Production release
  #     - run: yarn run client-package --push-build
  #       if: ${{ !endsWith(github.ref_name, '-stage') }}

  #     # Stage release
  #     - run: yarn run client-package --use-test-package --push-build
  #       if: ${{ endsWith(github.ref_name, '-stage') }}

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: macos64
  #         path: build/prod-client-build/GameJoltClient.dmg

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: macos64-package
  #         path: build/prod-client-build/osx64-package.tar.gz
